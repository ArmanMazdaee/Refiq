"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type Comment implements Content {
  id: String!
  author: String!
  contentCid: String!
  parent: Content!
  comments(skip: Int = 0, first: Int = 100, orderBy: Comment_orderBy, orderDirection: OrderDirection, where: Comment_filter): [Comment!]!
}

input Comment_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  author: String
  author_not: String
  author_gt: String
  author_lt: String
  author_gte: String
  author_lte: String
  author_in: [String!]
  author_not_in: [String!]
  author_contains: String
  author_contains_nocase: String
  author_not_contains: String
  author_not_contains_nocase: String
  author_starts_with: String
  author_starts_with_nocase: String
  author_not_starts_with: String
  author_not_starts_with_nocase: String
  author_ends_with: String
  author_ends_with_nocase: String
  author_not_ends_with: String
  author_not_ends_with_nocase: String
  contentCid: String
  contentCid_not: String
  contentCid_gt: String
  contentCid_lt: String
  contentCid_gte: String
  contentCid_lte: String
  contentCid_in: [String!]
  contentCid_not_in: [String!]
  contentCid_contains: String
  contentCid_contains_nocase: String
  contentCid_not_contains: String
  contentCid_not_contains_nocase: String
  contentCid_starts_with: String
  contentCid_starts_with_nocase: String
  contentCid_not_starts_with: String
  contentCid_not_starts_with_nocase: String
  contentCid_ends_with: String
  contentCid_ends_with_nocase: String
  contentCid_not_ends_with: String
  contentCid_not_ends_with_nocase: String
  parent: String
  parent_not: String
  parent_gt: String
  parent_lt: String
  parent_gte: String
  parent_lte: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_contains: String
  parent_contains_nocase: String
  parent_not_contains: String
  parent_not_contains_nocase: String
  parent_starts_with: String
  parent_starts_with_nocase: String
  parent_not_starts_with: String
  parent_not_starts_with_nocase: String
  parent_ends_with: String
  parent_ends_with_nocase: String
  parent_not_ends_with: String
  parent_not_ends_with_nocase: String
  parent_: Content_filter
  comments_: Comment_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Comment_filter]
  or: [Comment_filter]
}

enum Comment_orderBy {
  id
  author
  contentCid
  parent
  parent__id
  parent__author
  parent__contentCid
  comments
}

interface Content {
  id: String!
  author: String!
  contentCid: String!
  comments(skip: Int = 0, first: Int = 100, orderBy: Comment_orderBy, orderDirection: OrderDirection, where: Comment_filter): [Comment!]!
}

input Content_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  author: String
  author_not: String
  author_gt: String
  author_lt: String
  author_gte: String
  author_lte: String
  author_in: [String!]
  author_not_in: [String!]
  author_contains: String
  author_contains_nocase: String
  author_not_contains: String
  author_not_contains_nocase: String
  author_starts_with: String
  author_starts_with_nocase: String
  author_not_starts_with: String
  author_not_starts_with_nocase: String
  author_ends_with: String
  author_ends_with_nocase: String
  author_not_ends_with: String
  author_not_ends_with_nocase: String
  contentCid: String
  contentCid_not: String
  contentCid_gt: String
  contentCid_lt: String
  contentCid_gte: String
  contentCid_lte: String
  contentCid_in: [String!]
  contentCid_not_in: [String!]
  contentCid_contains: String
  contentCid_contains_nocase: String
  contentCid_not_contains: String
  contentCid_not_contains_nocase: String
  contentCid_starts_with: String
  contentCid_starts_with_nocase: String
  contentCid_not_starts_with: String
  contentCid_not_starts_with_nocase: String
  contentCid_ends_with: String
  contentCid_ends_with_nocase: String
  contentCid_not_ends_with: String
  contentCid_not_ends_with_nocase: String
  comments_: Comment_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Content_filter]
  or: [Content_filter]
}

enum Content_orderBy {
  id
  author
  contentCid
  comments
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Post implements Content {
  id: String!
  author: String!
  contentCid: String!
  topic: Topic!
  comments(skip: Int = 0, first: Int = 100, orderBy: Comment_orderBy, orderDirection: OrderDirection, where: Comment_filter): [Comment!]!
}

input Post_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  author: String
  author_not: String
  author_gt: String
  author_lt: String
  author_gte: String
  author_lte: String
  author_in: [String!]
  author_not_in: [String!]
  author_contains: String
  author_contains_nocase: String
  author_not_contains: String
  author_not_contains_nocase: String
  author_starts_with: String
  author_starts_with_nocase: String
  author_not_starts_with: String
  author_not_starts_with_nocase: String
  author_ends_with: String
  author_ends_with_nocase: String
  author_not_ends_with: String
  author_not_ends_with_nocase: String
  contentCid: String
  contentCid_not: String
  contentCid_gt: String
  contentCid_lt: String
  contentCid_gte: String
  contentCid_lte: String
  contentCid_in: [String!]
  contentCid_not_in: [String!]
  contentCid_contains: String
  contentCid_contains_nocase: String
  contentCid_not_contains: String
  contentCid_not_contains_nocase: String
  contentCid_starts_with: String
  contentCid_starts_with_nocase: String
  contentCid_not_starts_with: String
  contentCid_not_starts_with_nocase: String
  contentCid_ends_with: String
  contentCid_ends_with_nocase: String
  contentCid_not_ends_with: String
  contentCid_not_ends_with_nocase: String
  topic: String
  topic_not: String
  topic_gt: String
  topic_lt: String
  topic_gte: String
  topic_lte: String
  topic_in: [String!]
  topic_not_in: [String!]
  topic_contains: String
  topic_contains_nocase: String
  topic_not_contains: String
  topic_not_contains_nocase: String
  topic_starts_with: String
  topic_starts_with_nocase: String
  topic_not_starts_with: String
  topic_not_starts_with_nocase: String
  topic_ends_with: String
  topic_ends_with_nocase: String
  topic_not_ends_with: String
  topic_not_ends_with_nocase: String
  topic_: Topic_filter
  comments_: Comment_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Post_filter]
  or: [Post_filter]
}

enum Post_orderBy {
  id
  author
  contentCid
  topic
  topic__id
  topic__name
  topic__owner
  topic__infoCid
  comments
}

type Query {
  topic(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Topic
  topics(
    skip: Int = 0
    first: Int = 100
    orderBy: Topic_orderBy
    orderDirection: OrderDirection
    where: Topic_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Topic!]!
  post(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Post
  posts(
    skip: Int = 0
    first: Int = 100
    orderBy: Post_orderBy
    orderDirection: OrderDirection
    where: Post_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Post!]!
  comment(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Comment
  comments(
    skip: Int = 0
    first: Int = 100
    orderBy: Comment_orderBy
    orderDirection: OrderDirection
    where: Comment_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Comment!]!
  content(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Content
  contents(
    skip: Int = 0
    first: Int = 100
    orderBy: Content_orderBy
    orderDirection: OrderDirection
    where: Content_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Content!]!
  topicSearch(
    text: String!
    first: Int = 100
    skip: Int = 0

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    where: Topic_filter

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Topic!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  topic(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Topic
  topics(
    skip: Int = 0
    first: Int = 100
    orderBy: Topic_orderBy
    orderDirection: OrderDirection
    where: Topic_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Topic!]!
  post(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Post
  posts(
    skip: Int = 0
    first: Int = 100
    orderBy: Post_orderBy
    orderDirection: OrderDirection
    where: Post_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Post!]!
  comment(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Comment
  comments(
    skip: Int = 0
    first: Int = 100
    orderBy: Comment_orderBy
    orderDirection: OrderDirection
    where: Comment_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Comment!]!
  content(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Content
  contents(
    skip: Int = 0
    first: Int = 100
    orderBy: Content_orderBy
    orderDirection: OrderDirection
    where: Content_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Content!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Topic {
  id: String!
  name: String!
  owner: String!
  moderators: [String!]!
  infoCid: String!
  posts(skip: Int = 0, first: Int = 100, orderBy: Post_orderBy, orderDirection: OrderDirection, where: Post_filter): [Post!]!
}

input Topic_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  moderators: [String!]
  moderators_not: [String!]
  moderators_contains: [String!]
  moderators_contains_nocase: [String!]
  moderators_not_contains: [String!]
  moderators_not_contains_nocase: [String!]
  infoCid: String
  infoCid_not: String
  infoCid_gt: String
  infoCid_lt: String
  infoCid_gte: String
  infoCid_lte: String
  infoCid_in: [String!]
  infoCid_not_in: [String!]
  infoCid_contains: String
  infoCid_contains_nocase: String
  infoCid_not_contains: String
  infoCid_not_contains_nocase: String
  infoCid_starts_with: String
  infoCid_starts_with_nocase: String
  infoCid_not_starts_with: String
  infoCid_not_starts_with_nocase: String
  infoCid_ends_with: String
  infoCid_ends_with_nocase: String
  infoCid_not_ends_with: String
  infoCid_not_ends_with_nocase: String
  posts_: Post_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Topic_filter]
  or: [Topic_filter]
}

enum Topic_orderBy {
  id
  name
  owner
  moderators
  infoCid
  posts
}

